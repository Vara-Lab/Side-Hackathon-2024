// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct AppFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> AppFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::AppFactory for AppFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, app_factory::io::New>::new(self.remoting.clone(), ())
    }
}
pub mod app_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
    }
}
pub struct QueryService<R> {
    remoting: R,
}
impl<R> QueryService<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::QueryService for QueryService<R> {
    type Args = R::Args;
    fn keyring_account_data(
        &self,
        keyring_address: ActorId,
    ) -> impl Query<Output = QueryEvent, Args = R::Args> {
        RemotingAction::<_, query_service::io::KeyringAccountData>::new(
            self.remoting.clone(),
            keyring_address,
        )
    }
    fn keyring_address_from_user_coded_name(
        &self,
        user_coded_name: String,
    ) -> impl Query<Output = QueryEvent, Args = R::Args> {
        RemotingAction::<_, query_service::io::KeyringAddressFromUserCodedName>::new(
            self.remoting.clone(),
            user_coded_name,
        )
    }
    fn traffic_light(&self) -> impl Query<Output = IoTrafficLightState, Args = R::Args> {
        RemotingAction::<_, query_service::io::TrafficLight>::new(self.remoting.clone(), ())
    }
}
pub mod query_service {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct KeyringAccountData(());
        impl KeyringAccountData {
            #[allow(dead_code)]
            pub fn encode_call(keyring_address: ActorId) -> Vec<u8> {
                <KeyringAccountData as ActionIo>::encode_call(&keyring_address)
            }
        }
        impl ActionIo for KeyringAccountData {
            const ROUTE: &'static [u8] = &[
                48, 81, 117, 101, 114, 121, 83, 101, 114, 118, 105, 99, 101, 72, 75, 101, 121, 114,
                105, 110, 103, 65, 99, 99, 111, 117, 110, 116, 68, 97, 116, 97,
            ];
            type Params = ActorId;
            type Reply = super::QueryEvent;
        }
        pub struct KeyringAddressFromUserCodedName(());
        impl KeyringAddressFromUserCodedName {
            #[allow(dead_code)]
            pub fn encode_call(user_coded_name: String) -> Vec<u8> {
                <KeyringAddressFromUserCodedName as ActionIo>::encode_call(&user_coded_name)
            }
        }
        impl ActionIo for KeyringAddressFromUserCodedName {
            const ROUTE: &'static [u8] = &[
                48, 81, 117, 101, 114, 121, 83, 101, 114, 118, 105, 99, 101, 124, 75, 101, 121,
                114, 105, 110, 103, 65, 100, 100, 114, 101, 115, 115, 70, 114, 111, 109, 85, 115,
                101, 114, 67, 111, 100, 101, 100, 78, 97, 109, 101,
            ];
            type Params = String;
            type Reply = super::QueryEvent;
        }
        pub struct TrafficLight(());
        impl TrafficLight {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <TrafficLight as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for TrafficLight {
            const ROUTE: &'static [u8] = &[
                48, 81, 117, 101, 114, 121, 83, 101, 114, 118, 105, 99, 101, 48, 84, 114, 97, 102,
                102, 105, 99, 76, 105, 103, 104, 116,
            ];
            type Params = ();
            type Reply = super::IoTrafficLightState;
        }
    }
}
pub struct Signless<R> {
    remoting: R,
}
impl<R> Signless<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::Signless for Signless<R> {
    type Args = R::Args;
    fn bind_keyring_data_to_user_coded_name(
        &mut self,
        no_wallet_account: String,
        keyring_data: KeyringData,
    ) -> impl Call<Output = SignlessEvent, Args = R::Args> {
        RemotingAction::<_, signless::io::BindKeyringDataToUserCodedName>::new(
            self.remoting.clone(),
            (no_wallet_account, keyring_data),
        )
    }
}
pub mod signless {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct BindKeyringDataToUserCodedName(());
        impl BindKeyringDataToUserCodedName {
            #[allow(dead_code)]
            pub fn encode_call(
                no_wallet_account: String,
                keyring_data: super::KeyringData,
            ) -> Vec<u8> {
                <BindKeyringDataToUserCodedName as ActionIo>::encode_call(&(
                    no_wallet_account,
                    keyring_data,
                ))
            }
        }
        impl ActionIo for BindKeyringDataToUserCodedName {
            const ROUTE: &'static [u8] = &[
                32, 83, 105, 103, 110, 108, 101, 115, 115, 120, 66, 105, 110, 100, 75, 101, 121,
                114, 105, 110, 103, 68, 97, 116, 97, 84, 111, 85, 115, 101, 114, 67, 111, 100, 101,
                100, 78, 97, 109, 101,
            ];
            type Params = (String, super::KeyringData);
            type Reply = super::SignlessEvent;
        }
    }
}
pub struct TrafficLight<R> {
    remoting: R,
}
impl<R> TrafficLight<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::TrafficLight for TrafficLight<R> {
    type Args = R::Args;
    fn green(
        &mut self,
        user_coded_name: String,
    ) -> impl Call<Output = TrafficLightEvent, Args = R::Args> {
        RemotingAction::<_, traffic_light::io::Green>::new(self.remoting.clone(), user_coded_name)
    }
    fn red(
        &mut self,
        user_coded_name: String,
    ) -> impl Call<Output = TrafficLightEvent, Args = R::Args> {
        RemotingAction::<_, traffic_light::io::Red>::new(self.remoting.clone(), user_coded_name)
    }
    fn yellow(
        &mut self,
        user_coded_name: String,
    ) -> impl Call<Output = TrafficLightEvent, Args = R::Args> {
        RemotingAction::<_, traffic_light::io::Yellow>::new(self.remoting.clone(), user_coded_name)
    }
}
pub mod traffic_light {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct Green(());
        impl Green {
            #[allow(dead_code)]
            pub fn encode_call(user_coded_name: String) -> Vec<u8> {
                <Green as ActionIo>::encode_call(&user_coded_name)
            }
        }
        impl ActionIo for Green {
            const ROUTE: &'static [u8] = &[
                48, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 20, 71, 114, 101, 101,
                110,
            ];
            type Params = String;
            type Reply = super::TrafficLightEvent;
        }
        pub struct Red(());
        impl Red {
            #[allow(dead_code)]
            pub fn encode_call(user_coded_name: String) -> Vec<u8> {
                <Red as ActionIo>::encode_call(&user_coded_name)
            }
        }
        impl ActionIo for Red {
            const ROUTE: &'static [u8] = &[
                48, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 12, 82, 101, 100,
            ];
            type Params = String;
            type Reply = super::TrafficLightEvent;
        }
        pub struct Yellow(());
        impl Yellow {
            #[allow(dead_code)]
            pub fn encode_call(user_coded_name: String) -> Vec<u8> {
                <Yellow as ActionIo>::encode_call(&user_coded_name)
            }
        }
        impl ActionIo for Yellow {
            const ROUTE: &'static [u8] = &[
                48, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 24, 89, 101, 108, 108,
                111, 119,
            ];
            type Params = String;
            type Reply = super::TrafficLightEvent;
        }
    }
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum QueryEvent {
    LastWhoCall(ActorId),
    SignlessAccountAddress(Option<ActorId>),
    SignlessAccountData(Option<KeyringData>),
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct KeyringData {
    pub address: String,
    pub encoded: String,
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct IoTrafficLightState {
    pub current_light: String,
    pub all_users: Vec<(ActorId, String)>,
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum SignlessEvent {
    NoWalletAccountSet,
    Error(KeyringError),
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum KeyringError {
    KeyringAddressAlreadyEsists,
    UserDoesNotHasKeyringAccount,
    KeyringAccountAlreadyExists,
    SessionHasInvalidCredentials,
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum TrafficLightEvent {
    Green,
    Yellow,
    Red,
    Error(KeyringError),
}
pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait AppFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
    }
    #[allow(clippy::type_complexity)]
    pub trait QueryService {
        type Args;
        fn keyring_account_data(
            &self,
            keyring_address: ActorId,
        ) -> impl Query<Output = QueryEvent, Args = Self::Args>;
        fn keyring_address_from_user_coded_name(
            &self,
            user_coded_name: String,
        ) -> impl Query<Output = QueryEvent, Args = Self::Args>;
        fn traffic_light(&self) -> impl Query<Output = IoTrafficLightState, Args = Self::Args>;
    }
    #[allow(clippy::type_complexity)]
    pub trait Signless {
        type Args;
        fn bind_keyring_data_to_user_coded_name(
            &mut self,
            no_wallet_account: String,
            keyring_data: KeyringData,
        ) -> impl Call<Output = SignlessEvent, Args = Self::Args>;
    }
    #[allow(clippy::type_complexity)]
    pub trait TrafficLight {
        type Args;
        fn green(
            &mut self,
            user_coded_name: String,
        ) -> impl Call<Output = TrafficLightEvent, Args = Self::Args>;
        fn red(
            &mut self,
            user_coded_name: String,
        ) -> impl Call<Output = TrafficLightEvent, Args = Self::Args>;
        fn yellow(
            &mut self,
            user_coded_name: String,
        ) -> impl Call<Output = TrafficLightEvent, Args = Self::Args>;
    }
}
#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
extern crate std;
#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
pub mod mockall {
    use super::*;
    use sails_rs::mockall::*;
    mock! { pub QueryService<A> {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl<A> traits::QueryService for QueryService<A> { type Args = A; fn keyring_account_data (& self, keyring_address: ActorId,) -> MockQuery<A, QueryEvent>;fn keyring_address_from_user_coded_name (& self, user_coded_name: String,) -> MockQuery<A, QueryEvent>;fn traffic_light (& self, ) -> MockQuery<A, IoTrafficLightState>; } }
    mock! { pub Signless<A> {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl<A> traits::Signless for Signless<A> { type Args = A; fn bind_keyring_data_to_user_coded_name (&mut self, no_wallet_account: String,keyring_data: KeyringData,) -> MockCall<A, SignlessEvent>; } }
    mock! { pub TrafficLight<A> {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl<A> traits::TrafficLight for TrafficLight<A> { type Args = A; fn green (&mut self, user_coded_name: String,) -> MockCall<A, TrafficLightEvent>;fn red (&mut self, user_coded_name: String,) -> MockCall<A, TrafficLightEvent>;fn yellow (&mut self, user_coded_name: String,) -> MockCall<A, TrafficLightEvent>; } }
}
