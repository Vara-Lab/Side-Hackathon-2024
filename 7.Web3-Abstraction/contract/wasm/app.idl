type QueryEvent = enum {
  LastWhoCall: actor_id,
  SignlessAccountAddress: opt actor_id,
  SignlessAccountData: opt KeyringData,
};

type KeyringData = struct {
  address: str,
  encoded: str,
};

type IoTrafficLightState = struct {
  current_light: str,
  all_users: vec struct { actor_id, str },
};

type SignlessEvent = enum {
  NoWalletAccountSet,
  Error: KeyringError,
};

type KeyringError = enum {
  KeyringAddressAlreadyEsists,
  UserDoesNotHasKeyringAccount,
  KeyringAccountAlreadyExists,
  SessionHasInvalidCredentials,
};

type TrafficLightEvent = enum {
  Green,
  Yellow,
  Red,
  Error: KeyringError,
};

constructor {
  New : ();
};

service QueryService {
  query KeyringAccountData : (keyring_address: actor_id) -> QueryEvent;
  query KeyringAddressFromUserCodedName : (user_coded_name: str) -> QueryEvent;
  query TrafficLight : () -> IoTrafficLightState;
};

service Signless {
  BindKeyringDataToUserCodedName : (no_wallet_account: str, keyring_data: KeyringData) -> SignlessEvent;
};

service TrafficLight {
  Green : (user_coded_name: str) -> TrafficLightEvent;
  Red : (user_coded_name: str) -> TrafficLightEvent;
  Yellow : (user_coded_name: str) -> TrafficLightEvent;
};

